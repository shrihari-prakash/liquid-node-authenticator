{"version":3,"file":"index.js","sources":["../lib/errors.js","../lib/cache.js","../lib/logger.js","../lib/scope-manager.js","../lib/index.js"],"sourcesContent":["/**\r\n * Custom error class representing a Forbidden error (HTTP 403).\r\n *\r\n * @class ForbiddenError\r\n * @extends {Error}\r\n */\r\nclass ForbiddenError extends Error {\r\n    /**\r\n     * Creates an instance of ForbiddenError.\r\n     *\r\n     * @constructor\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        this.code = 403;\r\n        this.name = 'ForbiddenError';\r\n    }\r\n}\r\n\r\n/**\r\n * Custom error class representing an Unauthorized error (HTTP 401).\r\n *\r\n * @class UnauthorizedError\r\n * @extends {Error}\r\n */\r\nclass UnauthorizedError extends Error {\r\n    /**\r\n     * Creates an instance of UnauthorizedError.\r\n     *\r\n     * @constructor\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        this.code = 401;\r\n        this.name = 'UnauthorizedError';\r\n    }\r\n}\r\n\r\n/**\r\n * Custom error class representing a Network error (HTTP 503).\r\n *\r\n * @class NetworkError\r\n * @extends {Error}\r\n */\r\nclass NetworkError extends Error {\r\n    /**\r\n     * Creates an instance of NetworkError.\r\n     *\r\n     * @constructor\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        this.code = 503;\r\n        this.name = 'NetworkError';\r\n    }\r\n}\r\n\r\n/**\r\n * Custom error class for creating specific errors with a custom name and code.\r\n *\r\n * @class CustomError\r\n * @extends {Error}\r\n */\r\nclass CustomError extends Error {\r\n    /**\r\n     * Creates an instance of CustomError.\r\n     *\r\n     * @constructor\r\n     * @param {string} name - The custom name of the error.\r\n     * @param {number} code - The custom error code.\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(name, code, message) {\r\n        super(message);\r\n        this.code = code;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the provided error is an instance of any Liquid errors.\r\n *\r\n * @function\r\n * @param {Error} error - The error object to check.\r\n * @returns {boolean} True if the error is a ForbiddenError, UnauthorizedError, or NetworkError; otherwise, false.\r\n */\r\nfunction isLiquidError(error) {\r\n    return error instanceof ForbiddenError || error instanceof UnauthorizedError || error instanceof NetworkError;\r\n}\r\n\r\nexport { ForbiddenError, UnauthorizedError, NetworkError, CustomError, isLiquidError };\r\n","const FIVE_MINUTES = 300;\r\n\r\n/**\r\n * Cache class for storing and retrieving data with an external redis instance.\r\n *\r\n * @class\r\n */\r\nclass Cache {\r\n    /**\r\n     * Creates an instance of the Cache class.\r\n     *\r\n     * @constructor\r\n     * @param {Object} [cacheOptions] - Options for configuring the cache.\r\n     * @param {Object} [cacheOptions.client] - The caching client (e.g., Redis client) to use.\r\n     * @param {number} [cacheOptions.expire] - The expiration time for cached items in seconds.\r\n     */\r\n    constructor(cacheOptions) {\r\n        if (cacheOptions) {\r\n            this.cachePrefix = `liquid_node_connector:`;\r\n            this.cacheClient = cacheOptions.client;\r\n            this.cacheExpiry = cacheOptions.expire || FIVE_MINUTES;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves data from the cache using the specified key.\r\n     *\r\n     * @async\r\n     * @param {string} key - The key used to retrieve data from the cache.\r\n     * @returns {Promise<Object|null>} The cached data, or null if the cache is not configured.\r\n     */\r\n    async get(key) {\r\n        if (!this.cacheClient) {\r\n            return null;\r\n        }\r\n        let cacheResult = await this.cacheClient.get(`${this.cachePrefix}${key}`);\r\n        if (cacheResult) {\r\n            return JSON.parse(cacheResult);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores data in the cache with the specified key.\r\n     *\r\n     * @async\r\n     * @param {string} key - The key used to store data in the cache.\r\n     * @param {Object} data - The JSON data to be stored in the cache.\r\n     * @returns {Promise<undefined>} A Promise indicating the completion of the set operation.\r\n     */\r\n    async set(key, data) {\r\n        if (!this.cacheClient) {\r\n            return;\r\n        }\r\n        return await this.cacheClient.set(`${this.cachePrefix}${key}`, JSON.stringify(data), 'EX', this.cacheExpiry);\r\n    }\r\n}\r\n\r\nexport default Cache;","/**\r\n * Logger class for handling logging in the Liquid Node Connector.\r\n *\r\n * @class\r\n */\r\nclass Logger {\r\n    /**\r\n     * Creates an instance of the Logger class.\r\n     *\r\n     * @constructor\r\n     * @param {boolean} [debugging=true] - A flag indicating whether debugging is enabled.\r\n     */\r\n    constructor(debugging = true) {\r\n        /**\r\n         * A flag indicating whether debugging is enabled.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this.debugging = debugging;\r\n\r\n        /**\r\n         * The prefix to be added to log messages.\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this.prefix = \"[Liquid Node Connector]\";\r\n    }\r\n\r\n    /**\r\n     * Logs messages to the console with the \"debug\" level.\r\n     *\r\n     * @param {...*} args - The messages or values to be logged.\r\n     */\r\n    debug() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.log.apply(console, args);\r\n    }\r\n\r\n    /**\r\n     * Logs messages to the console with the \"info\" level.\r\n     *\r\n     * @param {...*} args - The messages or values to be logged.\r\n     */\r\n    info() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.log.apply(console, args);\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages to the console with the \"warn\" level.\r\n     *\r\n     * @param {...*} args - The warning messages or values to be logged.\r\n     */\r\n    warn() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.warn.apply(console, args);\r\n    }\r\n\r\n    /**\r\n    * Logs error messages to the console with the \"error\" level.\r\n    *\r\n    * @param {...*} args - The error messages or values to be logged.\r\n    */\r\n    error() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.error.apply(console, args);\r\n    }\r\n}\r\n\r\nexport default Logger;\r\n","import { Circuit, Retry, RetryMode } from 'mollitia';\r\n\r\n/**\r\n * @typedef {Object} Scope\r\n * @property {string} name - The name of the scope.\r\n * @property {string} description - The description of the scope.\r\n * @property {string} [parent] - The parent scope's name.\r\n */\r\n\r\n/**\r\n * Manages scopes and provides methods for checking if a scope is allowed.\r\n *\r\n * @class\r\n */\r\nclass ScopeManager {\r\n    /**\r\n     * Creates an instance of the ScopeManager class.\r\n     *\r\n     * @constructor\r\n     * @param {string} host - The base URL where the scopes can be fetched.\r\n     */\r\n    constructor(host, logger) {\r\n        /**\r\n         * The base URL where the scopes can be fetched.\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this.host = host;\r\n\r\n        /**\r\n         * The loaded scopes.\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this.scopes = {};\r\n\r\n        /**\r\n         * The logger.\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this.logger = logger;\r\n\r\n        this.logger.debug(\"Initializing scope manager with host: \" + this.host);\r\n\r\n        const circuit = new Circuit({\r\n            options: {\r\n                modules: [\r\n                    new Retry({\r\n                        attempts: 8,\r\n                        interval: 500,\r\n                        mode: RetryMode.LINEAR,\r\n                        factor: 2,\r\n                        onRejection: () => true\r\n                    })\r\n                ]\r\n            }\r\n        });\r\n        circuit.fn(this.initializeScopes.bind(this)).execute();\r\n    }\r\n\r\n    /**\r\n     * Recursively generates a tree structure of scopes.\r\n     *\r\n     * @param {Scope[]} scopes - The array of scopes to process.\r\n     * @param {string|null|undefined} [root=null] - The root scope's name.\r\n     * @returns {Object} The tree structure of scopes.\r\n     * @private\r\n     */\r\n    getScopeTree(scopes, root = null) {\r\n        return Object.fromEntries(\r\n            scopes\r\n                .filter((scope) => scope.parent == root)\r\n                .map((s) => [s.name, this.getScopeTree(scopes, s.name)])\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initializes scopes by fetching them from the server.\r\n     *\r\n     * @private\r\n     */\r\n    async initializeScopes() {\r\n        try {\r\n            const response = await fetch(`${this.host}/user/scopes`);\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch scopes. Status: ${response.status}`);\r\n            }\r\n            this.scopes = (await response.json()).data.scopes;\r\n            this.logger.error(\"Scopes initialized.\");\r\n        } catch (error) {\r\n            this.logger.error(\"Error initializing scopes:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all the loaded scopes.\r\n     *\r\n     * @returns {Object} The loaded scopes.\r\n     */\r\n    getScopes() {\r\n        return this.scopes;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given scope is allowed based on the user's allowed scopes.\r\n     *\r\n     * @param {string} scope - The scope to check.\r\n     * @param {Object} token - The token object.\r\n     * @returns {boolean} True if the scope is allowed, false otherwise.\r\n     */\r\n    checkTokenScope(scope, token = { scope: [] }) {\r\n        if (!this.scopes) {\r\n            this.logger.warn(\"Scope list not ready\");\r\n            return false;\r\n        }\r\n        const allowedScopes = token.scope;\r\n        if (this.isScopeAllowed(scope, allowedScopes)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a given scope is allowed based on a list of allowed scopes.\r\n     *\r\n     * @param {string} scope - The scope to check.\r\n     * @param {string[]} [allowedScopes=[]] - The array of allowed scopes.\r\n     * @returns {boolean} True if the scope is allowed, false otherwise.\r\n     */\r\n    isScopeAllowed(scope, allowedScopes = []) {\r\n        const scopeObject = this.scopes[scope];\r\n        if (!scopeObject) {\r\n            this.logger.warn(`Unknown scope ${scope}. Did you forget to configure this scope in your Liquid server?`);\r\n            return false;\r\n        }\r\n        if (allowedScopes.includes(scopeObject.name) || allowedScopes.includes(scopeObject.parent)) {\r\n            return true;\r\n        } else if (scopeObject.parent) {\r\n            return this.isScopeAllowed(scopeObject.parent, allowedScopes);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScopeManager;\r\n","import { ForbiddenError, UnauthorizedError, NetworkError, CustomError, isLiquidError } from \"./errors.js\";\r\nimport Cache from \"./cache\";\r\nimport Logger from \"./logger\";\r\nimport ScopeManager from \"./scope-manager.js\";\r\n\r\n/**\r\n * LiquidNodeAuthenticator provides methods for authenticating and obtaining access tokens\r\n * from a Liquid OAuth server.\r\n *\r\n * @class\r\n */\r\nclass LiquidNodeAuthenticator {\r\n    accessToken = null;\r\n    accessTokenExpiry = new Date(0);\r\n\r\n    /**\r\n     * Creates an instance of LiquidNodeAuthenticator.\r\n     *\r\n     * @constructor\r\n     * @param {Object} options - Configuration options for the LiquidNodeAuthenticator.\r\n     * @param {string} options.host - The base URL of the Liquid OAuth server.\r\n     * @param {string} options.clientId - The client ID for authentication.\r\n     * @param {string} options.clientSecret - The client secret for authentication.\r\n     * @param {(string|string[])} [options.scope=\"*\"] - The OAuth scope(s) for authentication.\r\n     * @param {Object} [options.cacheOptions] - Options for configuring the cache.\r\n     * @param {Object} [options.cacheOptions.client] - The caching client (e.g., Redis client) to use.\r\n     * @param {number} [options.cacheOptions.expire] - The expiration time for cached items in seconds.\r\n     * @param {boolean} [options.debugging] - Specifies if logs should be printed to console.\r\n     */\r\n    constructor({ host, clientId, clientSecret, scope = \"*\", cacheOptions, debugging = true }) {\r\n        this.clientId = clientId;\r\n        this.clientSecret = clientSecret;\r\n        this.scope = scope;\r\n        if (Array.isArray(this.scope)) {\r\n            this.scope = this.scope.join(\",\");\r\n        }\r\n        this.host = host;\r\n        this.cache = new Cache(cacheOptions);\r\n        this.logger = new Logger(debugging);\r\n        this.scopeManager = new ScopeManager(this.host, this.logger);\r\n        this.logger.info(\r\n            'Initialized Liquid Node Connector for client ' + clientId\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Authenticates a user using the provided token.\r\n    *\r\n    * @async\r\n    * @param {string} token - The authentication token to be validated.\r\n    * @throws {ForbiddenError} If the token is invalid or unauthorized.\r\n    * @throws {NetworkError} If a network error occurs during the authentication process.\r\n    * @returns {Object} The user's token information if authentication is successful.\r\n    */\r\n    async authenticate(token) {\r\n        try {\r\n            if (!token) { throw new ForbiddenError(); }\r\n            const cacheKey = `token:${token}`;\r\n            let cacheResult = await this.cache.get(cacheKey);\r\n            if (cacheResult) {\r\n                if (cacheResult.ok === 1) {\r\n                    return cacheResult.data.tokenInfo;\r\n                } else {\r\n                    throw new ForbiddenError();\r\n                }\r\n            }\r\n            const api = `${this.host}/oauth/introspect`;\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${(await this.getAccessToken()).accessToken}`,\r\n            };\r\n            const body = JSON.stringify({ token });\r\n            let response;\r\n            try {\r\n                response = await fetch(api, { method: \"POST\", headers, body });\r\n            } catch {\r\n                throw new NetworkError();\r\n            }\r\n            const result = await response.json();\r\n            // No need to await. Cache can always be set again if failed.\r\n            this.cache.set(cacheKey, result);\r\n            this.logger.debug(`Cache written for ${cacheKey}`);\r\n            if (response.status !== 200 || !result.ok) {\r\n                throw new ForbiddenError();\r\n            }\r\n            return result.data.tokenInfo;\r\n        } catch (error) {\r\n            this.logger.error(error);\r\n            if (isLiquidError(error)) { throw error; }\r\n            throw new CustomError('UnknownError', 500);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves an access token, either from memory or by making a request to the Liquid instance.\r\n     *\r\n     * @async\r\n     * @throws {NetworkError} If a network error occurs during the access token retrieval.\r\n     * @throws {UnauthorizedError} If the OAuth server returns an unauthorized status.\r\n     * @returns {Object} The access token and its expiration details.\r\n     */\r\n    async getAccessToken() {\r\n        try {\r\n            const now = new Date();\r\n            if (this.accessTokenExpiry.getTime() <= now.getTime()) {\r\n                const expiry = new Date();\r\n                const api = `${this.host}/oauth/token`;\r\n                const headers = {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                };\r\n                const body = new URLSearchParams();\r\n                body.append('grant_type', 'client_credentials');\r\n                body.append('client_id', this.clientId);\r\n                body.append('client_secret', this.clientSecret);\r\n                body.append('scope', this.scope);\r\n                let response;\r\n                try {\r\n                    response = await fetch(api, { method: 'POST', headers, body, });\r\n                } catch {\r\n                    throw new NetworkError();\r\n                }\r\n                if (response.status !== 200) {\r\n                    throw new UnauthorizedError();\r\n                }\r\n                const result = await response.json();\r\n                this.accessToken = result.access_token;\r\n                expiry.setSeconds(expiry.getSeconds() + result.expires_in);\r\n                this.accessTokenExpiry = expiry;\r\n                this.logger.debug('Access token returned from remote.');\r\n            } else {\r\n                this.logger.debug('Access token returned from memory.');\r\n            }\r\n            return {\r\n                accessToken: this.accessToken,\r\n                accessTokenExpiry: this.accessTokenExpiry,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(error);\r\n            if (isLiquidError(error)) { throw error; }\r\n            throw new CustomError('UnknownError', 500);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a given scope is allowed based on the user's allowed scopes.\r\n     *\r\n     * @param {string} scope - The scope to check.\r\n     * @param {Object} token - The Express response object.\r\n     * @returns {boolean} True if the scope is allowed, false otherwise.\r\n     */\r\n    checkTokenScope(scope, token) {\r\n        return this.scopeManager.checkTokenScope(scope, token);\r\n    }\r\n}\r\n\r\nexport default LiquidNodeAuthenticator;"],"names":[],"mappings":"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"}