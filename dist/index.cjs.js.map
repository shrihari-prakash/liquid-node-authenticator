{"version":3,"file":"index.cjs.js","sources":["../lib/errors.js","../lib/cache.js","../lib/logger.js","../lib/scope-manager.js","../lib/index.js"],"sourcesContent":["/**\r\n * Custom error class representing a Forbidden error (HTTP 403).\r\n *\r\n * @class ForbiddenError\r\n * @extends {Error}\r\n */\r\nclass ForbiddenError extends Error {\r\n    /**\r\n     * Creates an instance of ForbiddenError.\r\n     *\r\n     * @constructor\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        this.code = 403;\r\n        this.name = 'ForbiddenError';\r\n    }\r\n}\r\n\r\n/**\r\n * Custom error class representing an Unauthorized error (HTTP 401).\r\n *\r\n * @class UnauthorizedError\r\n * @extends {Error}\r\n */\r\nclass UnauthorizedError extends Error {\r\n    /**\r\n     * Creates an instance of UnauthorizedError.\r\n     *\r\n     * @constructor\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        this.code = 401;\r\n        this.name = 'UnauthorizedError';\r\n    }\r\n}\r\n\r\n/**\r\n * Custom error class representing a Network error (HTTP 503).\r\n *\r\n * @class NetworkError\r\n * @extends {Error}\r\n */\r\nclass NetworkError extends Error {\r\n    /**\r\n     * Creates an instance of NetworkError.\r\n     *\r\n     * @constructor\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(message) {\r\n        super(message);\r\n        this.code = 503;\r\n        this.name = 'NetworkError';\r\n    }\r\n}\r\n\r\n/**\r\n * Custom error class for creating specific errors with a custom name and code.\r\n *\r\n * @class CustomError\r\n * @extends {Error}\r\n */\r\nclass CustomError extends Error {\r\n    /**\r\n     * Creates an instance of CustomError.\r\n     *\r\n     * @constructor\r\n     * @param {string} name - The custom name of the error.\r\n     * @param {number} code - The custom error code.\r\n     * @param {string} [message] - Optional error message.\r\n     */\r\n    constructor(name, code, message) {\r\n        super(message);\r\n        this.code = code;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\n/**\r\n * Checks if the provided error is an instance of any Liquid errors.\r\n *\r\n * @function\r\n * @param {Error} error - The error object to check.\r\n * @returns {boolean} True if the error is a ForbiddenError, UnauthorizedError, or NetworkError; otherwise, false.\r\n */\r\nfunction isLiquidError(error) {\r\n    return error instanceof ForbiddenError || error instanceof UnauthorizedError || error instanceof NetworkError;\r\n}\r\n\r\nexport { ForbiddenError, UnauthorizedError, NetworkError, CustomError, isLiquidError };\r\n","const FIVE_MINUTES = 300;\r\n\r\n/**\r\n * Cache class for storing and retrieving data with an external redis instance.\r\n *\r\n * @class\r\n */\r\nclass Cache {\r\n    /**\r\n     * Creates an instance of the Cache class.\r\n     *\r\n     * @constructor\r\n     * @param {Object} [cacheOptions] - Options for configuring the cache.\r\n     * @param {Object} [cacheOptions.client] - The caching client (e.g., Redis client) to use.\r\n     * @param {number} [cacheOptions.expire] - The expiration time for cached items in seconds.\r\n     */\r\n    constructor(cacheOptions) {\r\n        if (cacheOptions) {\r\n            this.cachePrefix = `liquid_node_connector:`;\r\n            this.cacheClient = cacheOptions.client;\r\n            this.cacheExpiry = cacheOptions.expire || FIVE_MINUTES;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves data from the cache using the specified key.\r\n     *\r\n     * @async\r\n     * @param {string} key - The key used to retrieve data from the cache.\r\n     * @returns {Promise<Object|null>} The cached data, or null if the cache is not configured.\r\n     */\r\n    async get(key) {\r\n        if (!this.cacheClient) {\r\n            return null;\r\n        }\r\n        let cacheResult = await this.cacheClient.get(`${this.cachePrefix}${key}`);\r\n        if (cacheResult) {\r\n            return JSON.parse(cacheResult);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Stores data in the cache with the specified key.\r\n     *\r\n     * @async\r\n     * @param {string} key - The key used to store data in the cache.\r\n     * @param {Object} data - The JSON data to be stored in the cache.\r\n     * @returns {Promise<undefined>} A Promise indicating the completion of the set operation.\r\n     */\r\n    async set(key, data) {\r\n        if (!this.cacheClient) {\r\n            return;\r\n        }\r\n        return await this.cacheClient.set(`${this.cachePrefix}${key}`, JSON.stringify(data), 'EX', this.cacheExpiry);\r\n    }\r\n}\r\n\r\nexport default Cache;","/**\r\n * Logger class for handling logging in the Liquid Node Connector.\r\n *\r\n * @class\r\n */\r\nclass Logger {\r\n    /**\r\n     * Creates an instance of the Logger class.\r\n     *\r\n     * @constructor\r\n     * @param {boolean} [debugging=true] - A flag indicating whether debugging is enabled.\r\n     */\r\n    constructor(debugging = true) {\r\n        /**\r\n         * A flag indicating whether debugging is enabled.\r\n         * @type {boolean}\r\n         * @private\r\n         */\r\n        this.debugging = debugging;\r\n\r\n        /**\r\n         * The prefix to be added to log messages.\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this.prefix = \"[Liquid Node Connector]\";\r\n    }\r\n\r\n    /**\r\n     * Logs messages to the console with the \"debug\" level.\r\n     *\r\n     * @param {...*} args - The messages or values to be logged.\r\n     */\r\n    debug() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.log.apply(console, args);\r\n    }\r\n\r\n    /**\r\n     * Logs messages to the console with the \"info\" level.\r\n     *\r\n     * @param {...*} args - The messages or values to be logged.\r\n     */\r\n    info() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.log.apply(console, args);\r\n    }\r\n\r\n    /**\r\n     * Logs warning messages to the console with the \"warn\" level.\r\n     *\r\n     * @param {...*} args - The warning messages or values to be logged.\r\n     */\r\n    warn() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.warn.apply(console, args);\r\n    }\r\n\r\n    /**\r\n    * Logs error messages to the console with the \"error\" level.\r\n    *\r\n    * @param {...*} args - The error messages or values to be logged.\r\n    */\r\n    error() {\r\n        if (!this.debugging) {\r\n            return;\r\n        }\r\n        const args = Array.from(arguments);\r\n        args.unshift(this.prefix);\r\n        console.error.apply(console, args);\r\n    }\r\n}\r\n\r\nexport default Logger;\r\n","import { Circuit, Retry, RetryMode } from 'mollitia';\r\n\r\n/**\r\n * @typedef {Object} Scope\r\n * @property {string} name - The name of the scope.\r\n * @property {string} description - The description of the scope.\r\n * @property {string} [parent] - The parent scope's name.\r\n */\r\n\r\n/**\r\n * Manages scopes and provides methods for checking if a scope is allowed.\r\n *\r\n * @class\r\n */\r\nclass ScopeManager {\r\n    /**\r\n     * Creates an instance of the ScopeManager class.\r\n     *\r\n     * @constructor\r\n     * @param {string} host - The base URL where the scopes can be fetched.\r\n     */\r\n    constructor(host, logger) {\r\n        /**\r\n         * The base URL where the scopes can be fetched.\r\n         * @type {string}\r\n         * @private\r\n         */\r\n        this.host = host;\r\n\r\n        /**\r\n         * The loaded scopes.\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this.scopes = {};\r\n\r\n        /**\r\n         * The logger.\r\n         * @type {Object}\r\n         * @private\r\n         */\r\n        this.logger = logger;\r\n\r\n        this.logger.debug(\"Initializing scope manager with host: \" + this.host);\r\n\r\n        const circuit = new Circuit({\r\n            options: {\r\n                modules: [\r\n                    new Retry({\r\n                        attempts: 8,\r\n                        interval: 500,\r\n                        mode: RetryMode.LINEAR,\r\n                        factor: 2,\r\n                        onRejection: () => true\r\n                    })\r\n                ]\r\n            }\r\n        });\r\n        circuit.fn(this.initializeScopes.bind(this)).execute();\r\n    }\r\n\r\n    /**\r\n     * Recursively generates a tree structure of scopes.\r\n     *\r\n     * @param {Scope[]} scopes - The array of scopes to process.\r\n     * @param {string|null|undefined} [root=null] - The root scope's name.\r\n     * @returns {Object} The tree structure of scopes.\r\n     * @private\r\n     */\r\n    getScopeTree(scopes, root = null) {\r\n        return Object.fromEntries(\r\n            scopes\r\n                .filter((scope) => scope.parent == root)\r\n                .map((s) => [s.name, this.getScopeTree(scopes, s.name)])\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initializes scopes by fetching them from the server.\r\n     *\r\n     * @private\r\n     */\r\n    async initializeScopes() {\r\n        try {\r\n            const response = await fetch(`${this.host}/user/scopes`);\r\n            if (!response.ok) {\r\n                throw new Error(`Failed to fetch scopes. Status: ${response.status}`);\r\n            }\r\n            this.scopes = (await response.json()).data.scopes;\r\n            this.logger.error(\"Scopes initialized.\");\r\n        } catch (error) {\r\n            this.logger.error(\"Error initializing scopes:\", error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets all the loaded scopes.\r\n     *\r\n     * @returns {Object} The loaded scopes.\r\n     */\r\n    getScopes() {\r\n        return this.scopes;\r\n    }\r\n\r\n    /**\r\n     * Checks if a given scope is allowed based on the user's allowed scopes.\r\n     *\r\n     * @param {string} scope - The scope to check.\r\n     * @param {Object} token - The token object.\r\n     * @returns {boolean} True if the scope is allowed, false otherwise.\r\n     */\r\n    checkTokenScope(scope, token = { scope: [] }) {\r\n        if (!this.scopes) {\r\n            this.logger.warn(\"Scope list not ready\");\r\n            return false;\r\n        }\r\n        const allowedScopes = token.scope;\r\n        if (this.isScopeAllowed(scope, allowedScopes)) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a given scope is allowed based on a list of allowed scopes.\r\n     *\r\n     * @param {string} scope - The scope to check.\r\n     * @param {string[]} [allowedScopes=[]] - The array of allowed scopes.\r\n     * @returns {boolean} True if the scope is allowed, false otherwise.\r\n     */\r\n    isScopeAllowed(scope, allowedScopes = []) {\r\n        const scopeObject = this.scopes[scope];\r\n        if (!scopeObject) {\r\n            this.logger.warn(`Unknown scope ${scope}. Did you forget to configure this scope in your Liquid server?`);\r\n            return false;\r\n        }\r\n        if (allowedScopes.includes(scopeObject.name) || allowedScopes.includes(scopeObject.parent)) {\r\n            return true;\r\n        } else if (scopeObject.parent) {\r\n            return this.isScopeAllowed(scopeObject.parent, allowedScopes);\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n\r\nexport default ScopeManager;\r\n","import { ForbiddenError, UnauthorizedError, NetworkError, CustomError, isLiquidError } from \"./errors.js\";\r\nimport Cache from \"./cache\";\r\nimport Logger from \"./logger\";\r\nimport ScopeManager from \"./scope-manager.js\";\r\n\r\n/**\r\n * LiquidNodeAuthenticator provides methods for authenticating and obtaining access tokens\r\n * from a Liquid OAuth server.\r\n *\r\n * @class\r\n */\r\nclass LiquidNodeAuthenticator {\r\n    accessToken = null;\r\n    accessTokenExpiry = new Date(0);\r\n\r\n    /**\r\n     * Creates an instance of LiquidNodeAuthenticator.\r\n     *\r\n     * @constructor\r\n     * @param {Object} options - Configuration options for the LiquidNodeAuthenticator.\r\n     * @param {string} options.host - The base URL of the Liquid OAuth server.\r\n     * @param {string} options.clientId - The client ID for authentication.\r\n     * @param {string} options.clientSecret - The client secret for authentication.\r\n     * @param {(string|string[])} [options.scope=\"*\"] - The OAuth scope(s) for authentication.\r\n     * @param {Object} [options.cacheOptions] - Options for configuring the cache.\r\n     * @param {Object} [options.cacheOptions.client] - The caching client (e.g., Redis client) to use.\r\n     * @param {number} [options.cacheOptions.expire] - The expiration time for cached items in seconds.\r\n     * @param {boolean} [options.debugging] - Specifies if logs should be printed to console.\r\n     */\r\n    constructor({ host, clientId, clientSecret, scope = \"*\", cacheOptions, debugging = true }) {\r\n        this.clientId = clientId;\r\n        this.clientSecret = clientSecret;\r\n        this.scope = scope;\r\n        if (Array.isArray(this.scope)) {\r\n            this.scope = this.scope.join(\",\");\r\n        }\r\n        this.host = host;\r\n        this.cache = new Cache(cacheOptions);\r\n        this.logger = new Logger(debugging);\r\n        this.scopeManager = new ScopeManager(this.host, this.logger);\r\n        this.logger.info(\r\n            'Initialized Liquid Node Connector for client ' + clientId\r\n        );\r\n    }\r\n\r\n    /**\r\n    * Authenticates a user using the provided token.\r\n    *\r\n    * @async\r\n    * @param {string} token - The authentication token to be validated.\r\n    * @throws {ForbiddenError} If the token is invalid or unauthorized.\r\n    * @throws {NetworkError} If a network error occurs during the authentication process.\r\n    * @returns {Object} The user's token information if authentication is successful.\r\n    */\r\n    async authenticate(token) {\r\n        try {\r\n            if (!token) { throw new ForbiddenError(); }\r\n            const cacheKey = `token:${token}`;\r\n            let cacheResult = await this.cache.get(cacheKey);\r\n            if (cacheResult) {\r\n                if (cacheResult.ok === 1) {\r\n                    return cacheResult.data.tokenInfo;\r\n                } else {\r\n                    throw new ForbiddenError();\r\n                }\r\n            }\r\n            const api = `${this.host}/oauth/introspect`;\r\n            const headers = {\r\n                'Content-Type': 'application/json',\r\n                Authorization: `Bearer ${(await this.getAccessToken()).accessToken}`,\r\n            };\r\n            const body = JSON.stringify({ token });\r\n            let response;\r\n            try {\r\n                response = await fetch(api, { method: \"POST\", headers, body });\r\n            } catch {\r\n                throw new NetworkError();\r\n            }\r\n            const result = await response.json();\r\n            // No need to await. Cache can always be set again if failed.\r\n            this.cache.set(cacheKey, result);\r\n            this.logger.debug(`Cache written for ${cacheKey}`);\r\n            if (response.status !== 200 || !result.ok) {\r\n                throw new ForbiddenError();\r\n            }\r\n            return result.data.tokenInfo;\r\n        } catch (error) {\r\n            this.logger.error(error);\r\n            if (isLiquidError(error)) { throw error; }\r\n            throw new CustomError('UnknownError', 500);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Retrieves an access token, either from memory or by making a request to the Liquid instance.\r\n     *\r\n     * @async\r\n     * @throws {NetworkError} If a network error occurs during the access token retrieval.\r\n     * @throws {UnauthorizedError} If the OAuth server returns an unauthorized status.\r\n     * @returns {Object} The access token and its expiration details.\r\n     */\r\n    async getAccessToken() {\r\n        try {\r\n            const now = new Date();\r\n            if (this.accessTokenExpiry.getTime() <= now.getTime()) {\r\n                const expiry = new Date();\r\n                const api = `${this.host}/oauth/token`;\r\n                const headers = {\r\n                    'Content-Type': 'application/x-www-form-urlencoded',\r\n                };\r\n                const body = new URLSearchParams();\r\n                body.append('grant_type', 'client_credentials');\r\n                body.append('client_id', this.clientId);\r\n                body.append('client_secret', this.clientSecret);\r\n                body.append('scope', this.scope);\r\n                let response;\r\n                try {\r\n                    response = await fetch(api, { method: 'POST', headers, body, });\r\n                } catch {\r\n                    throw new NetworkError();\r\n                }\r\n                if (response.status !== 200) {\r\n                    throw new UnauthorizedError();\r\n                }\r\n                const result = await response.json();\r\n                this.accessToken = result.access_token;\r\n                expiry.setSeconds(expiry.getSeconds() + result.expires_in);\r\n                this.accessTokenExpiry = expiry;\r\n                this.logger.debug('Access token returned from remote.');\r\n            } else {\r\n                this.logger.debug('Access token returned from memory.');\r\n            }\r\n            return {\r\n                accessToken: this.accessToken,\r\n                accessTokenExpiry: this.accessTokenExpiry,\r\n            };\r\n        } catch (error) {\r\n            this.logger.error(error);\r\n            if (isLiquidError(error)) { throw error; }\r\n            throw new CustomError('UnknownError', 500);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if a given scope is allowed based on the user's allowed scopes.\r\n     *\r\n     * @param {string} scope - The scope to check.\r\n     * @param {Object} token - The Express response object.\r\n     * @returns {boolean} True if the scope is allowed, false otherwise.\r\n     */\r\n    checkTokenScope(scope, token) {\r\n        return this.scopeManager.checkTokenScope(scope, token);\r\n    }\r\n}\r\n\r\nexport default LiquidNodeAuthenticator;"],"names":["ForbiddenError","_Error","_inherits","_super","_createSuper","message","_this","_classCallCheck","call","code","name","_createClass","_wrapNativeSuper","Error","UnauthorizedError","_Error2","_super2","_this2","NetworkError","_Error3","_super3","_this3","CustomError","_Error4","_super4","_this4","isLiquidError","error","FIVE_MINUTES","Cache","cacheOptions","cachePrefix","cacheClient","client","cacheExpiry","expire","key","value","_get","_asyncToGenerator","_regeneratorRuntime","mark","_callee","cacheResult","wrap","_callee$","_context","prev","next","abrupt","get","concat","sent","JSON","parse","stop","_x","apply","arguments","_set","_callee2","data","_callee2$","_context2","set","stringify","_x2","_x3","Logger","debugging","length","undefined","prefix","debug","args","Array","from","unshift","console","log","info","warn","ScopeManager","host","logger","scopes","circuit","Circuit","options","modules","Retry","attempts","interval","mode","RetryMode","LINEAR","factor","onRejection","fn","initializeScopes","bind","execute","getScopeTree","_this5","root","Object","fromEntries","filter","scope","parent","map","s","_initializeScopes","_callee3","response","_callee3$","_context3","fetch","ok","status","json","t0","getScopes","checkTokenScope","token","allowedScopes","isScopeAllowed","scopeObject","includes","LiquidNodeAuthenticator","_ref","clientId","clientSecret","_ref$scope","_ref$debugging","_defineProperty","Date","isArray","join","cache","scopeManager","_authenticate","_callee4","cacheKey","api","headers","body","result","_callee4$","_context4","tokenInfo","getAccessToken","t1","accessToken","t2","Authorization","method","t3","t4","authenticate","_x4","_getAccessToken","_callee5","now","expiry","_callee5$","_context5","accessTokenExpiry","getTime","URLSearchParams","append","access_token","setSeconds","getSeconds","expires_in"],"mappings":"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"}